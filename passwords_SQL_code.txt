-- choosing five the most popular passwords
SELECT rank, password, category
FROM `strong-radius-399410.passwords.passwords_data`
WHERE rank <= 5
order by rank;

-- counting kind of category and percentage of using them
WITH kategorie AS(
SELECT category, COUNT(*) as how_many_kinds, ROUND((COUNT(*)/(SELECT COUNT(category) 
FROM `strong-radius-399410.passwords.passwords_data`))*100, 2) 
as percentage_of_this_categories
FROM `strong-radius-399410.passwords.passwords_data`
GROUP BY category
ORDER BY how_many_kinds DESC)
SELECT *
FROM kategorie;

-- avg(strength of password vs category)
SELECT k.category, ROUND(AVG(s.strength)) as avg_strength_of_password
FROM strong-radius-399410.passwords.all_categories as k
JOIN strong-radius-399410.passwords.passwords_data as s
ON k.category = s.category
GROUP BY k.category;

-- looking for numeric or alphabetic values or both
WITH tabela_z_typami_hasel_krotka AS (
SELECT COUNT(*) AS kind_of_password,type, 
ROUND(COUNT(*)/(SELECT COUNT(type) FROM `strong-radius-399410.passwords.passwords_data`),2)*100 as percentage_of_kinds
FROM (SELECT password,
    CASE
      WHEN REGEXP_CONTAINS(password, '[0-9]') AND
           REGEXP_CONTAINS(password, '[A-Za-z]') THEN 'Mixed'
      WHEN SAFE_CAST(password AS INT64) IS NOT NULL THEN 'Numeric'
      ELSE 'Letters'
    END AS type
  FROM `strong-radius-399410.passwords.passwords_data`
)
GROUP BY type)
SELECT *
FROM tabela_z_typami_hasel_krotka;

-- looking for avg time to crack this types of password
WITH utworzenie_tabeli_z_godzinami AS (
SELECT password,
    CASE
      WHEN REGEXP_CONTAINS(password, '[0-9]') AND
           REGEXP_CONTAINS(password, '[A-Za-z]') THEN 'Mixed'
      WHEN SAFE_CAST(password AS INT64) IS NOT NULL THEN 'Numeric'
      ELSE 'Letters'
    END AS type, 
    value, time_unit,
    CASE 
      WHEN time_unit = 'years' THEN ROUND(value * 365 * 24, 3)
      WHEN time_unit = 'weeks' THEN ROUND(value * 7 * 24, 3)
      WHEN time_unit = 'days' THEN ROUND(value * 24, 3)
      WHEN time_unit = 'minutes' THEN ROUND(value / 60, 3)
      WHEN time_unit = 'seconds' THEN ROUND(value / 3600, 3)
      ELSE value
    END AS time_in_hours
  FROM `strong-radius-399410.passwords.passwords_data`)

  SELECT type,
  ROUND(
  COALESCE(AVG(CASE WHEN type = 'Numeric' THEN time_in_hours END), 0) +
  COALESCE(AVG(CASE WHEN type = 'Letters' THEN time_in_hours END), 0) +
  COALESCE(AVG(CASE WHEN type = 'Mixed' THEN time_in_hours END), 0),2) AS average_h_for_password
  FROM utworzenie_tabeli_z_godzinami
  GROUP BY type;

-- creating table with time in hours
WITH tabelka AS(
SELECT password, category,
    CASE 
      WHEN time_unit = 'years' THEN ROUND(value * 365 * 24, 3)
      WHEN time_unit = 'weeks' THEN ROUND(value * 7 * 24, 3)
      WHEN time_unit = 'days' THEN ROUND(value * 24, 3)
      WHEN time_unit = 'minutes' THEN ROUND(value / 60, 3)
      WHEN time_unit = 'seconds' THEN ROUND(value / 3600, 3)
      ELSE value
    END AS time_in_hours
FROM `strong-radius-399410.passwords.passwords_data`)
SELECT *
FROM tabelka;

-- strength vs len(password) + category
SELECT password, length(password) as password_length, category, strength
FROM `strong-radius-399410.passwords.passwords_data`
ORDER BY strength;

-- table with password length, category, strength and time in hours
SELECT p.password_length, p.category, p.strength, t.time_in_hours
FROM `strong-radius-399410.passwords.table_1` as t
JOIN `strong-radius-399410.passwords.table_2` as p
ON t.password = p.password
ORDER BY category;
